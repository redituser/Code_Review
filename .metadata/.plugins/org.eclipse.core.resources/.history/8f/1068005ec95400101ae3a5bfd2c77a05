package com.assignment.admin.controller;

import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.assignment.admin.dto.AdminMemberDto;
import com.assignment.admin.service.AdminService;
import com.assignment.member.vo.MemberVO;

@Controller
public class AdminController {
	@Autowired
    private AdminService adminService;

	@GetMapping("/admin/dashboard")
	public String adminDashboard(
	        @RequestParam(required = false) String keyword,
	        @PageableDefault(size = 10, sort = "createDate", direction = Sort.Direction.DESC) Pageable pageable,
	        Model model) {

	    System.out.println("--- [수사 시작] adminDashboard 메서드 시작. 전달받은 keyword: " + keyword);
	    
	    try {
	        Page<MemberVO> memberPage = adminService.findMembers(keyword, pageable);
	        System.out.println("--- [1단계 통과] adminService.findMembers() 성공. " + memberPage.getTotalElements() + "개의 데이터 찾음.");

	        Page<AdminMemberDto> memberDtoPage = memberPage.map(AdminMemberDto::new);
	        System.out.println("--- [2단계 통과] MemberVO를 AdminMemberDto로 매핑 성공.");

	        model.addAttribute("memberPage", memberDtoPage);
	        System.out.println("--- [3단계 통과] 'memberPage' 데이터를 모델에 추가 완료.");

	        model.addAttribute("keyword", keyword);
	        System.out.println("--- [4단계 통과] 'keyword' 데이터를 모델에 추가 완료. 이제 템플릿으로 넘어갑니다.");

	        return "admin/dashboard";

	    } catch (Exception e) {
	        System.err.println("--- !!!!! [긴급] adminDashboard 메서드 실행 중 심각한 예외 발생 !!!!! ---");
	        // 예외의 전체 내용을 콘솔에 빨간색 글씨로 자세히 출력합니다.
	        e.printStackTrace(); 
	        
	        // 문제가 생겼을 경우, 일부러 다른 에러 페이지로 보내서 추가적인 에러를 막습니다.
	        // 만약 'templates/error/500.html' 파일이 없다면 이 부분은 주석 처리해도 됩니다.
	        model.addAttribute("errorMessage", e.getMessage());
	        return "error/500"; 
	    }
	}
	    // ★★★ [추가] 사용자 등급 변경 API ★★★
	    @PostMapping("/users/{userId}/type")
	    @ResponseBody
	    public ResponseEntity<?> updateUserType(@PathVariable String userId, @RequestBody Map<String, Character> payload) {
	        try {
	            adminService.updateUserType(userId, payload.get("type"));
	            return ResponseEntity.ok().build();
	        } catch (Exception e) {
	            return ResponseEntity.badRequest().body(Map.of("message", e.getMessage()));
	        }
	    }

	    // ★★★ [추가] 사용자 삭제 API ★★★
	    @DeleteMapping("/users/{userId}")
	    @ResponseBody
	    public ResponseEntity<?> deleteUser(@PathVariable String userId) {
	        try {
	            adminService.deleteUser(userId);
	            return ResponseEntity.ok().build();
	        } catch (Exception e) {
	            return ResponseEntity.badRequest().body(Map.of("message", e.getMessage()));
	        }
	    }


	
}
