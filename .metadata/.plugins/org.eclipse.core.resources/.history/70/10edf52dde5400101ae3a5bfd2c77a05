package com.assignment.like.service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.assignment.board.vo.BoardVO;
import com.assignment.like.repository.LikeRepository;
import com.assignment.like.vo.Like;
import com.assignment.member.vo.MemberVO;


@Service
@Transactional // 메소드 내의 모든 DB 작업이 하나의 트랜잭션으로 묶입니다.
public class LikeService {

    @Autowired
    private LikeRepository likeRepository;

    /**
     * 좋아요 토글 기능 (추가/삭제)
     * @return 좋아요 처리 후의 상태와 총 좋아요 수를 담은 Map
     */
    public Map<String, Object> toggleLike(int boardNo, String memberId) {
        Optional<Like> likeOptional = likeRepository.findByBoardBoardNoAndMemberId(boardNo, memberId);

        boolean isLiked;

        if (likeOptional.isPresent()) {
            // 이미 좋아요를 누른 상태 -> 좋아요 취소
            likeRepository.delete(likeOptional.get());
            isLiked = false;
        } else {
            // 좋아요를 누르지 않은 상태 -> 좋아요 추가
            Like newLike = new Like();
            
            // 실제 Board와 Member 객체를 찾아서 설정해야 합니다.
            // 여기서는 임시로 BoardVO와 MemberVO 객체를 생성하여 ID만 설정합니다.
            // 실제 구현에서는 BoardRepository와 MemberRepository를 통해 엔티티를 조회해야 합니다.
            BoardVO board = new BoardVO();
            board.setBoardNo(boardNo);
            
            MemberVO member = new MemberVO();
            member.setId(memberId);
            
            newLike.setBoard(board);
            newLike.setMember(member);
            
            likeRepository.save(newLike);
            isLiked = true;
        }

        long likeCount = likeRepository.countByBoardBoardNo(boardNo);

        Map<String, Object> result = new HashMap<>();
        result.put("liked", isLiked);
        result.put("likeCount", likeCount);
        
        return result;
    }
    
    /**
     * 특정 사용자가 좋아요한 게시물 목록 조회
     */
    @Transactional(readOnly = true)
    public List<BoardVO> getLikedBoardsByMember(String memberId) {
        List<Like> likes = likeRepository.findByMemberIdOrderByCreateDateDesc(memberId);
        // Like 엔티티 리스트에서 BoardVO 리스트를 추출하여 반환
        return likes.stream()
                    .map(Like::getBoard)
                    .collect(Collectors.toList());
    }
    
    
    @Transactional(readOnly = true)
    public Map<String, Object> getLikeStatus(int boardNo, String memberId) {
        boolean isLiked = likeRepository.findByBoardBoardNoAndMemberId(boardNo, memberId).isPresent();
        long likeCount = likeRepository.countByBoardBoardNo(boardNo);

        Map<String, Object> result = new HashMap<>();
        result.put("liked", isLiked);
        result.put("likeCount", likeCount);
        
        return result;
    }
    
    
}