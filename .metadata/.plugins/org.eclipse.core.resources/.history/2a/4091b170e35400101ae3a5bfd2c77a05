package com.assignment.board.Controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.web.PageableDefault;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.assignment.board.service.BoardService;
import com.assignment.board.vo.BoardSummaryDto;
import com.assignment.board.vo.BoardVO;
import com.assignment.like.service.LikeService;

import jakarta.servlet.http.HttpSession;

@Controller
public class BoardController {
	@Autowired
	BoardService service;

	@Autowired
	LikeService likeService;

	@GetMapping("/board/boardList")
	public String mainPage(Model model) {
		System.out.println("보드리스트 호출됨");

		List<BoardVO> boardList = service.selectPublicBoardListAll();
		System.out.println(boardList);
		model.addAttribute("boardList", boardList);

		return "board/board-list";
	}

	@GetMapping("/board/detail/{boardNo}")
	public String boardDetail(@PathVariable("boardNo") int boardNo, Model model, HttpSession session) {

		// 1. 원본 글(질문) 정보 조회
		BoardVO question = service.selectBoardOne(boardNo);
		if (question == null) {
			return "redirect:/board/list";
		}

		// 2. 이 질문에 달린 답변 목록 조회
		List<BoardVO> answers = service.getAnswersForQuestion(boardNo);

		// 3. (UI 편의를 위해) 채택된 답변에 isAccepted 플래그 설정
		if (question.getAcceptedAnswerNo() != null) {
			for (BoardVO answer : answers) {
				if (answer.getBoardNo() == question.getAcceptedAnswerNo()) {
					answer.setAccepted(true);
					break;
				}
			}
		}

		// 4. 모델에 데이터 추가
		model.addAttribute("question", question);
		model.addAttribute("answers", answers);

		// 5. 현재 로그인 사용자가 질문 작성자인지 확인
		String loginId = (String) session.getAttribute("loginId");
		if (service.isBoardOwner(boardNo, loginId)) {
			model.addAttribute("isQuestionOwner", true);
		}

		// 6. 좋아요 수 등 기타 정보 추가
		long likeCount = (Long) likeService.getLikeStatus(boardNo, "").get("likeCount");
		question.setLikeCount(likeCount);

		model.addAttribute("loginId", loginId);

		return "board/board-detail";
	}

	@GetMapping("/board/boardnew")
	public String insertPage() {
		return "board/board-new";
	}

	@PostMapping("/board/write")
	public String insert(BoardVO board, HttpSession session) {
		String loginId = (String) session.getAttribute("loginId");

		if (loginId == null) {
			return "redirect:/user/login";
		}

		board.setWriterId(loginId);
		BoardVO vo = service.editOrInsertBoard(board);

		return "redirect:/board/detail/" + vo.getBoardNo();

	}

	@GetMapping("/board/edit/{boardNo}")
	public String boardEditForm(@PathVariable("boardNo") int boardNo, Model model) {
		BoardVO board = service.selectBoardOne(boardNo);
		model.addAttribute("board", board);
		return "board/board-edit";
	}

	@PostMapping("/board/edit")
	public String boardEdit(BoardVO vo) {
		BoardVO board = service.editOrInsertBoard(vo);
		return "redirect:/board/detail/" + board.getBoardNo();
	}

	@GetMapping("/board/delete/{boardNo}")
	public String boardDelete(@PathVariable("boardNo") int boardNo) {
		System.out.println("삭제 호출입니다");
		service.deleteBoard(boardNo);
		return "redirect:/board/boardList";
	}

	@GetMapping("/board/list")
	public String boardListPage(Model model,
			@PageableDefault(size = 10, sort = "createDate", direction = Sort.Direction.DESC) Pageable pageable) {

		Page<BoardVO> boardPageVO = service.getBoardPage(pageable);
		Page<BoardSummaryDto> boardPageDto = convertToDtoPage(boardPageVO, pageable);

		addPaginationAttributes(model, boardPageDto);
		model.addAttribute("pageTitle", "전체 게시글"); // 페이지 제목 추가
		return "board/board-list";
	}

	private List<BoardSummaryDto> convertToDto(List<BoardVO> boards) {
		if (boards == null || boards.isEmpty()) {
			return List.of();
		}
		return boards.stream().map(board -> {
			long likeCount = likeService.getLikeCount(board.getBoardNo());
			return new BoardSummaryDto(board, likeCount);
		}).collect(Collectors.toList());
	}

	@GetMapping("/board/popular")
	public String popularBoardListPage(Model model, @PageableDefault(size = 10) Pageable pageable) {

		Page<BoardVO> boardPageVO = boardService.getPopularBoardPage(pageable);
		Page<BoardSummaryDto> boardPageDto = convertToDtoPage(boardPageVO, pageable);

		addPaginationAttributes(model, boardPageDto);
		model.addAttribute("pageTitle", "인기 게시글"); // 페이지 제목 추가
		return "board/board-list"; // 인기글도 동일한 템플릿을 사용
	}

	// ★★★ [수정된 부분] ★★★
	@PostMapping("/board/{questionNo}/answer")
	public String addAnswer(@PathVariable("questionNo") int questionNo, BoardVO answer, HttpSession session) {
		String loginId = (String) session.getAttribute("loginId");
		if (loginId == null) {
			return "redirect:/user/login";
		}

		// 1. 원본 질문글 정보를 가져옵니다. (제목, 카테고리 등을 재활용하기 위해)
		BoardVO question = service.selectBoardOne(questionNo);
		if (question == null) {
			// 원본 질문이 없으면 진행 불가
			return "redirect:/board/list";
		}

		// 2. 답변(answer) VO에 필요한 정보들을 설정합니다.
		answer.setWriterId(loginId);
		answer.setParentBoardNo(questionNo); // 부모(질문)의 번호 설정

		// ★ 3. NOT NULL 필드인 제목(boardTitle)을 원본 글을 참고하여 설정합니다.
		answer.setBoardTitle("Re: " + question.getBoardTitle());

		// 4. (선택사항) 카테고리 등 다른 정보도 원본 글을 따라가도록 설정하면 좋습니다.
		answer.setBoardCategory(question.getBoardCategory());

		// 5. 완성된 답변 객체를 저장합니다.
		service.editOrInsertBoard(answer);

		// 6. 답변 작성 후, 원래 질문 상세 페이지로 다시 돌아갑니다.
		return "redirect:/board/detail/" + questionNo;
	}

	@PostMapping("/board/{questionNo}/accept/{answerNo}")
	@ResponseBody
	public Map<String, Object> acceptAnswer(@PathVariable("questionNo") int questionNo,
			@PathVariable("answerNo") int answerNo, HttpSession session) {
		String loginId = (String) session.getAttribute("loginId");
		Map<String, Object> response = new HashMap<>();

		if (!service.isBoardOwner(questionNo, loginId)) {
			response.put("success", false);
			response.put("message", "질문 작성자만 답변을 채택할 수 있습니다.");
			return response;
		}

		try {
			service.acceptAnswer(questionNo, answerNo);
			response.put("success", true);
			response.put("message", "답변이 채택되었습니다.");
		} catch (Exception e) {
			e.printStackTrace();
			response.put("success", false);
			response.put("message", "처리 중 오류가 발생했습니다: " + e.getMessage());
		}
		return response;
	}

}
