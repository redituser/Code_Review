<!DOCTYPE html>
<html lang="ko">
<head>
<title>{{groupInfo.groupName}} - 그룹 대시보드</title>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<script src="https://cdn.dhtmlx.com/gantt/edge/dhtmlxgantt.js"></script>
<link href="https://cdn.dhtmlx.com/gantt/edge/dhtmlxgantt.css" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
<style>
/* ================================================================== */
/* 1. 테마 및 색상 정의 (Enhanced Dark Theme) */
/* ================================================================== */
:root {
    --bg-body: #0a0c10;
    --bg-sidebar: #161b22;
    --bg-content: #0d1117;
    --bg-surface: #21262d;
    --border-primary: #30363d;
    --border-secondary: #21262d;
    --text-primary: #f0f6fc;
    --text-secondary: #8b949e;
    --text-muted: #656d76;
    --text-accent: #58a6ff;
    --accent-color: #f78166;
    --success-color: #3fb950;
    --danger-color: #f85149;
    --sidebar-width: 260px;

    /* Enhanced Gantt Colors */
    --task-color-1-bg: #1e40af; --task-color-1-border: #60a5fa;
    --task-color-2-bg: #c2410c; --task-color-2-border: #fb923c;
    --task-color-3-bg: #166534; --task-color-3-border: #4ade80;
    --task-color-4-bg: #be185d; --task-color-4-border: #f472b6;
    --task-project-bg: #374151; --task-project-border: #9ca3af;
}

/* ================================================================== */
/* 2. 기본 스타일 및 폰트 */
/* ================================================================== */
* { box-sizing: border-box; }

html { height: 100%; }
body {
    margin: 0; padding: 0;
    background-color: var(--bg-body);
    color: var(--text-primary);
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif;
    font-size: 14px; line-height: 1.6;
    display: flex; height: 100%; overflow: hidden;
    font-weight: 400;
}

/* ================================================================== */
/* 3. 사이드바 스타일 */
/* ================================================================== */
.sidebar {
    width: var(--sidebar-width);
    background-color: var(--bg-sidebar);
    border-right: 1px solid var(--border-primary);
    padding: 24px;
    display: flex; flex-direction: column;
    flex-shrink: 0;
}

.sidebar-header {
    padding-bottom: 20px; margin-bottom: 24px;
    border-bottom: 1px solid var(--border-primary);
}
.sidebar-header a {
    color: var(--text-primary); text-decoration: none;
    font-size: 18px; font-weight: 600;
    display: flex; align-items: center;
}
.sidebar-header svg {
    width: 24px; height: 24px; margin-right: 12px;
    color: var(--accent-color);
}

.sidebar-nav ul { list-style: none; padding: 0; margin: 0; }
.sidebar-nav li { margin-bottom: 4px; }
.sidebar-nav a {
    display: flex; align-items: center;
    padding: 12px 16px;
    color: var(--text-secondary);
    text-decoration: none;
    border-radius: 8px;
    font-weight: 500;
    transition: all 0.2s ease;
}
.sidebar-nav a:hover {
    color: var(--text-primary);
    background-color: rgba(255,255,255,0.06);
}
.sidebar-nav a.active {
    color: var(--text-primary);
    background-color: var(--bg-surface);
}
.sidebar-nav svg {
    width: 18px; height: 18px; margin-right: 12px;
    flex-shrink: 0;
}

/* ================================================================== */
/* 4. 메인 콘텐츠 영역 */
/* ================================================================== */
.main-content {
    flex-grow: 1;
    display: flex; flex-direction: column;
    height: 100%; overflow: hidden;
}

.container {
    width: 100%; padding: 32px 40px;
    display: flex; flex-direction: column;
    flex-grow: 1; min-height: 0;
}

.page-header { margin-bottom: 32px; }
.page-header h1 {
    margin: 0; font-size: 32px; font-weight: 600;
    color: var(--text-primary);
}
.page-header .group-name { color: var(--text-accent); font-weight: 700; }

/* ================================================================== */
/* 5. 탭 컨텐츠 & 로드맵 */
/* ================================================================== */
.tab-content { display: none; flex-grow: 1; min-height: 0; flex-direction: column; }
.tab-content.active { display: flex; }

.main-content.roadmap-active .container { max-width: 100%; padding: 20px; }
.main-content.roadmap-active #gantt-chart-container {
    flex-grow: 1; border: 1px solid var(--border-primary);
    border-radius: 8px; min-height: 0;
    background-color: var(--bg-content);
}

.section-header {
    display: flex; justify-content: space-between; align-items: center;
    margin-bottom: 20px; padding-bottom: 12px;
    border-bottom: 1px solid var(--border-secondary);
    flex-shrink: 0;
}
.section-header h2 { margin: 0; font-size: 24px; font-weight: 600; color: var(--text-primary); }
.header-actions { display: flex; gap: 12px; }

/* ================================================================== */
/* 6. 버튼 & 게시글 스타일 */
/* ================================================================== */
.btn {
    display: inline-flex; align-items: center; justify-content: center;
    padding: 10px 16px; font-size: 14px; font-weight: 500;
    color: var(--text-primary); background-color: var(--bg-surface);
    border: 1px solid var(--border-primary);
    border-radius: 6px; cursor: pointer;
    transition: all 0.2s ease;
    text-decoration: none;
}
.btn:hover { background-color: var(--border-primary); border-color: var(--text-secondary); }
.btn--primary { color: #fff; background-color: var(--success-color); border-color: var(--success-color); }
.btn--primary:hover { filter: brightness(1.1); }

.post-list-container {
    border: 1px solid var(--border-primary); border-radius: 8px;
    background-color: var(--bg-content); overflow: hidden;
}
.post-item { border-bottom: 1px solid var(--border-secondary); }
.post-item:last-child { border-bottom: none; }
.post-item-link {
    display: flex; align-items: center; padding: 16px 20px;
    text-decoration: none; color: var(--text-primary);
    transition: background-color 0.15s ease;
}
.post-item-link:hover { background-color: rgba(240, 246, 252, 0.03); }
.post-item-icon { margin-right: 16px; color: var(--text-secondary); flex-shrink: 0; }
.post-item-icon svg { width: 16px; height: 16px; fill: currentColor; }
.post-item-body { display: flex; flex-direction: column; }
.post-item-title { font-weight: 600; font-size: 16px; line-height: 1.4; }
.post-item-title:hover { color: var(--text-accent); }
.empty-state { padding: 64px 32px; text-align: center; color: var(--text-secondary); }

/* ================================================================== */
/* 8. 모달 스타일 */
/* ================================================================== */
.modal {
    display: none; position: fixed; z-index: 1000;
    left: 0; top: 0; width: 100%; height: 100%;
    overflow: auto; background-color: rgba(0, 0, 0, 0.8);
    align-items: center; justify-content: center;
}
.modal.active { display: flex; }
.modal-content {
    background-color: var(--bg-sidebar); padding: 32px;
    border: 1px solid var(--border-primary);
    border-radius: 12px; width: 90%; max-width: 520px;
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.5);
}
.modal-header {
    padding-bottom: 20px; border-bottom: 1px solid var(--border-primary);
    margin-bottom: 24px; display: flex;
    justify-content: space-between; align-items: center;
}
.modal-header h2 { margin: 0; font-size: 20px; font-weight: 600; }
.close-btn {
    color: var(--text-secondary); font-size: 24px; font-weight: bold;
    cursor: pointer; line-height: 1; padding: 4px;
    border-radius: 4px; transition: all 0.2s ease;
}
.close-btn:hover { color: var(--text-primary); background-color: var(--bg-surface); }
.form-group { margin-bottom: 20px; }
.form-group label { display: block; margin-bottom: 8px; font-weight: 500; color: var(--text-primary); }
.form-group input, .form-group select, .form-group textarea {
    width: 100%; padding: 12px 16px; background-color: var(--bg-content);
    border: 1px solid var(--border-primary); color: var(--text-primary);
    border-radius: 6px; font-size: 14px; font-family: inherit;
    transition: border-color 0.2s ease;
}
.form-group textarea { min-height: 80px; resize: vertical; }
.form-group input:focus, .form-group select:focus, .form-group textarea:focus { outline: none; border-color: var(--text-accent); }
.form-actions { display: flex; justify-content: flex-end; gap: 12px; margin-top: 24px; }

/* ================================================================== */
/* 9. DHTMLX Gantt 테마 오버라이드 (디자인 완성) */
/* ================================================================== */
/* ================================================================== */
/* 9. DHTMLX Gantt 테마 오버라이드 (Gemini 다크 테마 스타일) */
/* ================================================================== */
/* --- 새로운 작업 색상 변수 정의 --- */
:root {
    --task-gemini-1-bg: #1A3A59; --task-gemini-1-border: #89B4FA;
    --task-gemini-2-bg: #402633; --task-gemini-2-border: #F48FB1;
    --task-gemini-3-bg: #004D40; --task-gemini-3-border: #80CBC4;
    --task-gemini-4-bg: #563360; --task-gemini-4-border: #CE93D8;
    --task-gemini-5-bg: #6E4220; --task-gemini-5-border: #FFCC80;
    --task-project-bg: #4B5563; --task-project-border: #9CA3AF;
}

#gantt-chart-container { 
    border-radius: 8px; 
    overflow: hidden; 
}
#gantt { 
    width: 100%; 
    height: 100%; 
}

/* --- 전체 배경 및 폰트 --- */
.gantt_layout_cell, .gantt_grid, .gantt_task {
    background-color: var(--bg-content) !important;
    font-family: 'Inter', sans-serif !important;
}

/* --- 헤더 영역 (그리드 & 타임라인) --- */
.gantt_grid_scale, .gantt_task_scale {
    background-color: var(--bg-sidebar) !important;
    border-color: var(--border-primary) !important;
}
.gantt_grid_head_cell, .gantt_scale_cell {
    background-color: var(--bg-sidebar) !important;
    color: var(--text-primary) !important;
    font-weight: 500 !important;
    border-color: var(--border-primary) !important;
}

/* --- 그리드/타임라인 구분선(Splitter) 및 레이아웃 테두리 (핵심 수정) --- */
.gantt_splitter, [class*="gantt_layout_cell_border"] {
    background-color: var(--border-primary) !important;
    border-color: var(--border-primary) !important;
}


/* --- 그리드 데이터 영역 --- */
.gantt_grid_data .gantt_row, .gantt_grid_data .gantt_row .gantt_cell { 
    background-color: var(--bg-content) !important; 
    border-color: var(--border-primary) !important;
}
.gantt_grid_data .gantt_row.odd, .gantt_grid_data .gantt_row.odd .gantt_cell { 
    background-color: #06090f !important; 
}
.gantt_tree_content { color: var(--text-primary) !important; }


/* --- 타임라인 데이터 영역 --- */
.gantt_task_bg { background-color: var(--bg-content) !important; }
.gantt_task_row, .gantt_task_row .gantt_task_cell {
    background-color: var(--bg-content) !important;
    border-color: var(--border-primary) !important;
}
.gantt_task_row.odd, .gantt_task_row.odd .gantt_task_cell { 
    background-color: #06090f !important;
}

/* --- 호버 & 선택 효과 --- */
.gantt_row:hover, .gantt_row:hover .gantt_cell, .gantt_row:hover .gantt_task_cell {
    background-color: rgba(88, 166, 255, 0.1) !important;
}
.gantt_row.gantt_selected, .gantt_row.gantt_selected .gantt_cell, .gantt_row.gantt_selected .gantt_task_cell {
    background-color: rgba(88, 166, 255, 0.15) !important;
}

/* --- 작업 바(Bar) 스타일 (Gemini 색상 적용) --- */
.gantt_task_line { 
    border-radius: 6px; 
    border-width: 1px; 
    border-style: solid; 
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2); 
}
.gantt_task_line .gantt_task_content { 
    color: white; 
    font-weight: 500;
    font-size: 13px;
}
.gantt_task_line .gantt_task_progress { 
    background: rgba(255, 255, 255, 0.4); /* 진행률 표시 바 색상 */
    border-radius: 5px;
}
.gantt_task_line.task-color-1 { background-color: var(--task-gemini-1-bg); border-color: var(--task-gemini-1-border); }
.gantt_task_line.task-color-2 { background-color: var(--task-gemini-2-bg); border-color: var(--task-gemini-2-border); }
.gantt_task_line.task-color-3 { background-color: var(--task-gemini-3-bg); border-color: var(--task-gemini-3-border); }
.gantt_task_line.task-color-4 { background-color: var(--task-gemini-4-bg); border-color: var(--task-gemini-4-border); }
.gantt_task_line.task-color-5 { background-color: var(--task-gemini-5-bg); border-color: var(--task-gemini-5-border); }
.gantt_task_line.gantt_project { background-color: var(--task-project-bg); border-color: var(--task-project-border); }

/* --- 관리 아이콘 스타일 --- */
.gantt_action_button_wrapper { display: flex; justify-content: center; align-items: center; gap: 8px; }
.gantt_action_icon {
    width: 16px; height: 16px;
    cursor: pointer; color: var(--text-secondary);
    transition: all 0.2s ease;
}
.gantt_action_icon:hover { color: var(--text-primary); transform: scale(1.15); }
.gantt_action_icon.delete_icon:hover { color: var(--danger-color); }

/* --- 툴팁 스타일 --- */
.gantt_tooltip {
    background-color: var(--bg-surface) !important;
    border: 1px solid var(--border-primary) !important;
    color: var(--text-primary) !important;
    font-family: 'Inter', sans-serif !important;
    font-size: 13px !important;
    border-radius: 6px !important;
    box-shadow: 0 4px 12px rgba(0,0,0,0.3) !important;
}

</style>
</head>
<body>

<aside class="sidebar">
    <div class="sidebar-header">
        <a href="/">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M12 2C6.475 2 2 6.475 2 12s4.475 10 10 10 10-4.475 10-10S17.525 2 12 2zm0 18c-4.411 0-8-3.589-8-8s3.589-8 8-8 8 3.589 8 8-3.589 8-8 8z"></path><path d="M13 7h-2v5.414l3.293 3.293 1.414-1.414L13 11.586z"></path></svg>
            <span>프로젝트 협업툴</span>
        </a>
    </div>
    <nav class="sidebar-nav">
        <ul>
            <li><a href="#" class="nav-link active" data-tab="posts">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M20 3H4c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2h16c1.103 0 2-.897 2-2V5c0-1.103-.897-2-2-2zM4 19V5h16l.002 14H4z"></path><path d="M6 7h12v2H6zm0 4h12v2H6zm0 4h6v2H6z"></path></svg>
                <span>게시글</span>
            </a></li>
            <li><a href="#" class="nav-link" data-tab="roadmap">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M19 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"/></svg>
                <span>로드맵</span>
            </a></li>
        </ul>
    </nav>
</aside>

<main class="main-content">
    <div class="container">
        <header class="page-header">
            <h1><span class="group-name">{{groupInfo.groupName}}</span> 그룹 활동</h1>
        </header>

        <div id="posts" class="tab-content active">
             <div class="post-list-container">
                {{#groupPosts}}
                <article class="post-item">
                    <a href="/board/detail/{{boardNo}}" class="post-item-link">
                        <div class="post-item-icon"><svg viewBox="0 0 16 16" version="1.1" class="icon-discussion" fill="currentColor"><path fill-rule="evenodd" d="M1.5 2.75a.75.75 0 00-1.5 0V11c0 .966.784 1.75 1.75 1.75h1.586c.281 0 .554.11.75.299l1.163 1.163a.75.75 0 001.06 0l1.162-1.162a1.249 1.249 0 01.75-.3h3.578A1.75 1.75 0 0014.25 11V2.75a.75.75 0 00-1.5 0V11c0 .138-.112.25-.25.25H8.364a2.75 2.75 0 00-1.65.614L6 12.657l-.714-.743a2.75 2.75 0 00-1.65-.614H2.75a.25.25 0 01-.25-.25V2.75zM1 1.25a.25.25 0 01.25-.25h13.5a.25.25 0 01.25.25v1.5a.25.25 0 01-.25-.25h-13.5a.25.25 0 01-.25-.25v-1.5z"></path></svg></div>
                        <div class="post-item-body"><strong class="post-item-title">{{boardTitle}}</strong></div>
                    </a>
                </article>
                {{/groupPosts}}
                {{^groupPosts}}
                <div class="empty-state"><p>아직 작성된 게시글이 없습니다.</p></div>
                {{/groupPosts}}
            </div>
        </div>

        <div id="roadmap" class="tab-content">
            <div class="section-header">
                <h2>프로젝트 로드맵</h2>
                <div class="header-actions">
                    <button id="add-milestone-btn" class="btn">새 마일스톤 추가</button>
                    <button id="add-task-btn" class="btn btn--primary">새 작업 추가</button>
                </div>
            </div>
            <div id="gantt-chart-container"><div id="gantt"></div></div>
        </div>
    </div>
</main>

<!-- 작업 생성/수정 모달 -->
<div id="task-modal" class="modal">
    <div class="modal-content">
        <div class="modal-header"><h2 id="task-modal-title">새 작업 만들기</h2><span class="close-btn">&times;</span></div>
        <form id="task-form">
            <input type="hidden" id="task-id">
            <div class="form-group"><label for="task-milestone-id">마일스톤</label><select id="task-milestone-id" required></select></div>
            <div class="form-group"><label for="task-title">작업명</label><input type="text" id="task-title" required placeholder="작업명을 입력하세요"></div>
            <div class="form-group"><label for="task-start-date">시작일</label><input type="date" id="task-start-date" required></div>
            <div class="form-group"><label for="task-end-date">종료일</label><input type="date" id="task-end-date" required></div>
            <div class="form-group">
    <label for="task-assignee-id">담당자</label>
    <select id="task-assignee-id"></select>
</div>
            <div class="form-actions"><button type="button" class="btn close-btn">취소</button><button type="submit" class="btn btn--primary">저장하기</button></div>
        </form>
    </div>
</div>

<!-- 마일스톤 생성/수정 모달 -->
<div id="milestone-modal" class="modal">
    <div class="modal-content">
        <div class="modal-header"><h2 id="milestone-modal-title">새 마일스톤 만들기</h2><span class="close-btn">&times;</span></div>
        <form id="milestone-form">
            <input type="hidden" id="milestone-id">
            <div class="form-group"><label for="milestone-title">마일스톤 이름</label><input type="text" id="milestone-title" required placeholder="마일스톤 이름을 입력하세요"></div>
            <div class="form-group"><label for="milestone-description">설명 (선택)</label><textarea id="milestone-description" placeholder="마일스톤에 대한 설명을 입력하세요"></textarea></div>
            <div class="form-group"><label for="milestone-due-date">마감일 (선택)</label><input type="date" id="milestone-due-date"></div>
            <div class="form-actions"><button type="button" class="btn close-btn">취소</button><button type="submit" class="btn btn--primary">저장하기</button></div>
        </form>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
    // --- 기본 변수 및 요소 설정 ---
    const groupNo = '{{groupNo}}' || (window.location.pathname.split('/')[2] || '1');
    let isGanttInitialized = false;

    // --- Gantt Chart 설정 ---
    function initializeGantt() {
        gantt.plugins({ tooltip: true });
        gantt.config.date_format = "%Y-%m-%d";
        gantt.config.scale_height = 50;
        gantt.config.row_height = 40;
        gantt.config.fit_tasks = true;
        gantt.config.columns = [
            { name: "text", label: "작업 이름", tree: true, width: '*', resize: true },
            { name: "start_date", label: "시작일", align: "center", width: 100 },
            { name: "duration", label: "기간", align: "center", width: 70 },
            { name: "owner", label: "담당자", align: "center", width: 100, template: task => task.owner || "미지정" },
            {
                name: "actions", label: "관리", width: 80, align: "center",
                template: task => {
                    const editIcon = `<svg class="gantt_action_icon edit_icon" data-id="${task.id}" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" /><path fill-rule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clip-rule="evenodd" /></svg>`;
                    const deleteIcon = `<svg class="gantt_action_icon delete_icon" data-id="${task.id}" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" /></svg>`;
                    return `<div class="gantt_action_button_wrapper">${editIcon}${deleteIcon}</div>`;
                }
            }
        ];
        gantt.templates.task_class = (start, end, task) => {
            if (task.type === 'project') return 'gantt_project';
            return `task-color-${(task.id % 4) + 1}`;
        };
        gantt.templates.tooltip_text = (start, end, task) => `<b>${task.text}</b><br/><b>시작:</b> ${gantt.templates.tooltip_date_format(start)}<br/><b>종료:</b> ${gantt.templates.tooltip_date_format(end)}`;
        gantt.init(document.getElementById('gantt'));
        isGanttInitialized = true;
    }

    // --- 데이터 로딩 및 렌더링 (에러 핸들링 강화) ---
    async function loadAndRenderGantt() {
        if (!isGanttInitialized) initializeGantt();
        try {
            gantt.clearAll();
            gantt.message({ text: "데이터 로딩 중...", expire: 2000 });
            const fetchOptions = { cache: 'no-cache' };
            const milestonesRes = await fetch(`/api/groups/${groupNo}/milestones`, fetchOptions);
            if (!milestonesRes.ok) throw new Error(`마일스톤 로딩 실패 (${milestonesRes.status})`);
            
            const milestones = await milestonesRes.json();
            const taskPromises = milestones.map(m => 
                fetch(`/api/groups/${groupNo}/milestones/${m.milestoneId}/tasks`, fetchOptions)
                .then(res => res.ok ? res.json() : [])
            );
            const allTasks = (await Promise.all(taskPromises)).flat();
            
            const ganttData = milestones.map(m => {
                // 프로젝트(마일스톤)에 기본 날짜 제공 (valueOf 에러 방지)
                const milestoneStartDate = m.dueDate || m.createDate.split('T')[0] || new Date();
                return {
                    id: `m_${m.milestoneId}`, text: m.title, type: 'project', open: true,
                    description: m.description, dueDate: m.dueDate,
                    start_date: milestoneStartDate, // 에러 방지를 위한 기본값
                    duration: 1, // 기본 기간
                    readonly: true // 드래그로 수정 방지
                };
            }).concat(
                allTasks.filter(t => {
                    if (!t.startDate || !t.endDate) {
                        console.warn(`[데이터 경고] 날짜가 없는 작업을 건너뜁니다:`, t);
                        return false;
                    }
                    return true;
                }).map(t => ({
                    id: t.taskId, text: t.title, start_date: t.startDate, end_date: t.endDate,
                    parent: `m_${t.milestoneId}`, owner: t.assigneeId, status: t.status
                }))
            );
            
            gantt.parse({ data: ganttData });
        } catch (error) {
            gantt.message({ type: "error", text: "데이터 로딩 중 에러 발생: " + error.message });
        }
    }
    
    async function loadAssigneeOptions() {
        const select = taskModal.form.querySelector('#task-assignee-id');
        select.innerHTML = ''; // 기존 옵션 초기화
        select.disabled = true; // 로딩 중 비활성화

        try {
            // 그룹 멤버 목록을 가져오는 API 호출
            const res = await fetch(`/api/groups/${groupNo}/members`);
            if (!res.ok) throw new Error('멤버 목록 로드 실패');
            const members = await res.json();
            
            // 드롭다운 옵션 생성
            select.add(new Option('담당자 없음', '')); // value를 빈 문자열로 설정
            members.forEach(member => {
                // 화면에는 "닉네임 (ID)" 형식으로, 실제 값은 ID로 저장
                select.add(new Option(`${member.nickname} (${member.memberId})`, member.memberId));
            });

        } catch (error) {
            console.error("담당자 옵션 로딩 실패", error);
            select.innerHTML = '<option value="">멤버 로드 실패</option>';
        } finally {
            select.disabled = false; // 로딩 완료 후 활성화
        }
    }

    // --- 모달 관리 ---
    function ModalManager(modalId) {
        this.modal = document.getElementById(modalId);
        this.form = this.modal.querySelector('form');
        this.title = this.modal.querySelector('.modal-header h2');
        this.modal.querySelectorAll('.close-btn').forEach(btn => btn.addEventListener('click', () => this.close()));
        this.modal.addEventListener('click', e => { if (e.target === this.modal) this.close(); });
        this.open = () => this.modal.classList.add('active');
        this.close = () => this.modal.classList.remove('active');
    }
    const taskModal = new ModalManager('task-modal');
    const milestoneModal = new ModalManager('milestone-modal');

    // --- 이벤트 핸들러 ---
    document.querySelectorAll('.nav-link').forEach(link => {
        link.addEventListener('click', e => {
            e.preventDefault();
            const tabId = e.currentTarget.dataset.tab;
            document.querySelectorAll('.nav-link, .tab-content').forEach(el => el.classList.remove('active'));
            document.querySelector(`.nav-link[data-tab="${tabId}"]`).classList.add('active');
            document.getElementById(tabId).classList.add('active');
            document.querySelector('.main-content').classList.toggle('roadmap-active', tabId === 'roadmap');
            if (tabId === 'roadmap') {
                if (!isGanttInitialized) loadAndRenderGantt(); else gantt.render();
            }
        });
    });

    gantt.attachEvent("onTaskClick", (id, e) => {
        const target = e.target.closest('svg.gantt_action_icon');
        if (!target) return true;
        const task = gantt.getTask(id);
        const isMilestone = task.type === 'project';
        if (target.classList.contains("edit_icon")) {
            isMilestone ? openMilestoneModal(task) : openTaskModal(task);
        } else if (target.classList.contains("delete_icon")) {
            const itemType = isMilestone ? "마일스톤" : "작업";
            const confirmText = isMilestone ? `'${task.text}' 마일스톤과 모든 하위 작업을 정말 삭제하시겠습니까?` : `'${task.text}' 작업을 정말 삭제하시겠습니까?`;
            gantt.confirm({
                title: `${itemType} 삭제 확인`, text: confirmText,
                ok: "삭제", cancel: "취소",
                callback: result => result && (isMilestone ? deleteMilestone(id) : deleteTask(id))
            });
        }
        return false;
    });
    
    document.getElementById('add-task-btn')?.addEventListener('click', () => openTaskModal());
    document.getElementById('add-milestone-btn')?.addEventListener('click', () => openMilestoneModal());

    // --- 마일스톤 CRUD ---
    function openMilestoneModal(milestone = null) {
        const form = milestoneModal.form;
        form.reset();
        milestoneModal.title.textContent = milestone ? '마일스톤 수정' : '새 마일스톤 만들기';
        if (milestone) {
            form.querySelector('#milestone-id').value = milestone.id.replace('m_', '');
            form.querySelector('#milestone-title').value = milestone.text;
            form.querySelector('#milestone-description').value = milestone.description || '';
            form.querySelector('#milestone-due-date').value = milestone.dueDate || '';
        } else {
            form.querySelector('#milestone-id').value = '';
        }
        milestoneModal.open();
    }
    
    milestoneModal.form.addEventListener('submit', async e => {
        e.preventDefault();
        const form = e.target, id = form.querySelector('#milestone-id').value, isEdit = !!id;
        const data = { title: form.querySelector('#milestone-title').value, description: form.querySelector('#milestone-description').value, dueDate: form.querySelector('#milestone-due-date').value || null };
        const url = `/api/groups/${groupNo}/milestones${isEdit ? `/${id}` : ''}`, method = isEdit ? 'PUT' : 'POST';
        try {
            const res = await fetch(url, { method, headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(data) });
            if (!res.ok) throw new Error(`마일스톤 ${isEdit ? '수정' : '생성'} 실패`);
            gantt.message({ type: 'success', text: `마일스톤이 성공적으로 ${isEdit ? '수정' : '생성'}되었습니다.` });
            milestoneModal.close();
            await loadAndRenderGantt();
        } catch (error) { gantt.message({ type: 'error', text: error.message }); }
    });

    async function deleteMilestone(ganttId) {
        const id = ganttId.replace('m_', '');
        try {
            const res = await fetch(`/api/groups/${groupNo}/milestones/${id}`, { method: 'DELETE' });
            if (!res.ok) throw new Error('서버에서 마일스톤 삭제 실패');
            gantt.deleteTask(ganttId);
            gantt.message({ type: 'success', text: "마일스톤이 삭제되었습니다." });
        } catch (error) { gantt.message({ type: 'error', text: error.message }); }
    }
    
    // --- 작업 CRUD ---
    async function openTaskModal(task = null) {
        const form = taskModal.form;
        form.reset();

        // ▼▼▼▼▼ 마일스톤과 담당자 목록을 먼저 불러옵니다 ▼▼▼▼▼
        await loadMilestoneOptions();
        await loadAssigneeOptions(); // 이 줄을 추가!
        // ▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲

        taskModal.title.textContent = task ? '작업 수정' : '새 작업 만들기';
        if (task) {
            form.querySelector('#task-id').value = task.id;
            form.querySelector('#task-title').value = task.text;
            form.querySelector('#task-milestone-id').value = task.parent.replace('m_', '');
            if (task.start_date) form.querySelector('#task-start-date').value = gantt.templates.format_date(new Date(task.start_date));
            if (task.end_date) form.querySelector('#task-end-date').value = gantt.templates.format_date(new Date(task.end_date));
            
            // 이제 <select> 드롭다운의 값을 설정합니다.
            form.querySelector('#task-assignee-id').value = task.owner || '';
        } else {
            form.querySelector('#task-id').value = '';
        }
        taskModal.open();
    }
    
    async function loadMilestoneOptions() {
        try {
            const res = await fetch(`/api/groups/${groupNo}/milestones`, { cache: 'no-cache' });
            if (!res.ok) return;
            const milestones = await res.json();
            const select = taskModal.form.querySelector('#task-milestone-id');
            select.innerHTML = '';
            milestones.forEach(m => select.add(new Option(m.title, m.milestoneId)));
        } catch (error) { console.error("마일스톤 옵션 로딩 실패", error); }
    }
    
    taskModal.form.addEventListener('submit', async e => {
        e.preventDefault();
        const form = e.target, taskId = form.querySelector('#task-id').value, milestoneId = form.querySelector('#task-milestone-id').value;
        const isEdit = !!taskId;
        const taskData = {
            title: form.querySelector('#task-title').value,
            startDate: form.querySelector('#task-start-date').value,
            endDate: form.querySelector('#task-end-date').value,
            assigneeId: form.querySelector('#task-assignee-id').value || null
        };
        const url = `/api/groups/${groupNo}/milestones/${milestoneId}/tasks` + (isEdit ? `/${taskId}` : '');
        const method = isEdit ? 'PUT' : 'POST';

        try {
            const res = await fetch(url, { method, headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(taskData) });
            if (!res.ok) {
                const errorBody = await res.text();
                throw new Error(`작업 ${isEdit ? '수정' : '생성'} 실패: ${errorBody || res.statusText}`);
            }
            gantt.message({ type: 'success', text: `작업이 성공적으로 ${isEdit ? '수정' : '생성'}되었습니다.` });
            taskModal.close();
            await loadAndRenderGantt();
        } catch (error) {
            gantt.message({ type: 'error', text: error.message });
        }
    });
    
    async function deleteTask(id) {
        const task = gantt.getTask(id), milestoneId = task.parent.replace('m_', '');
        try {
            const res = await fetch(`/api/groups/${groupNo}/milestones/${milestoneId}/tasks/${id}`, { method: 'DELETE' });
            if (!res.ok) throw new Error('서버에서 작업 삭제 실패');
            gantt.deleteTask(id);
            gantt.message({ type: 'success', text: "작업이 삭제되었습니다." });
        } catch (error) { gantt.message({ type: 'error', text: error.message }); }
    }

    // --- 초기 실행 ---
    document.querySelector('.nav-link[data-tab="posts"]').click();
});
</script>
</body>
</html>
