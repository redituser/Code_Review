package com.assignment.liveroom.controller;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.messaging.handler.annotation.DestinationVariable;
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.assignment.liveroom.service.LiveRoomService;
import com.assignment.liveroom.vo.LiveRoomParticipantDto;
import com.assignment.liveroom.vo.LiveRoomVO;

import jakarta.servlet.http.HttpSession;

@Controller

public class LiveRoomController {

	@Autowired
	private LiveRoomService liveRoomService;

	// === WebSocket 메시지 처리 ===

	/**
	 * 클라이언트로부터 코드 업데이트 메시지를 받아, 해당 방을 구독하는 모든 클라이언트에게 다시 전달(broadcast)합니다.
	 * 
	 * @param roomId  메시지가 속한 방의 ID
	 * @param message 클라이언트가 보낸 메시지 (JSON이 CodeUpdateMessage 객체로 자동 변환됩니다)
	 * @return 모든 구독자에게 전달될 메시지 객체
	 */
	@MessageMapping("/code/update/{roomId}")
	@SendTo("/topic/room/{roomId}")
	public CodeUpdatePayload handleCodeUpdate(@DestinationVariable("roomId") String roomId, CodeUpdatePayload message) {
		message.setType("CODE_UPDATE");
		return message;
	}

	@MessageMapping("/chat/{roomId}")
	@SendTo("/topic/room/{roomId}")
	public WebSocketMessage handleChatMessage(@DestinationVariable("roomId") String roomId, WebSocketMessage message) {
		message.setType("CHAT_MESSAGE");
		return message;
	}

	// === 일반 HTTP 요청 처리 ===

	@PostMapping("/api/live-rooms")
	@ResponseBody
	public ResponseEntity<LiveRoomVO> createLiveRoom(@RequestBody Map<String, String> payload, HttpSession session) {
		String loginId = (String) session.getAttribute("loginId");
		if (loginId == null) {
			return ResponseEntity.status(401).build();
		}
		String roomName = payload.get("roomName");
		LiveRoomVO createdRoom = liveRoomService.createRoom(roomName, loginId);
		return ResponseEntity.ok(createdRoom);
	}

	@GetMapping("/api/my-live-rooms")
	@ResponseBody
	public ResponseEntity<List<LiveRoomVO>> getMyLiveRooms(HttpSession session) {
		String loginId = (String) session.getAttribute("loginId");
		if (loginId == null) {
			return ResponseEntity.status(401).build();
		}
		List<LiveRoomVO> myRooms = liveRoomService.getMyRooms(loginId);
		return ResponseEntity.ok(myRooms);
	}

	@GetMapping("/live-room/{roomId}")
	public String enterLiveRoom(@PathVariable("roomId") Long roomId, Model model, HttpSession session) {
		// ================= [디버깅 로그 추가] =================
		// 1. 이 메서드에 진입했는지 확인하는 로그
		System.out.println("### [디버그] enterLiveRoom 메서드 진입. 요청된 roomId: " + roomId);
		// ======================================================

		String loginId = (String) session.getAttribute("loginId");
		if (loginId == null) {
			return "redirect:/user/login";
		}

		LiveRoomVO roomDetails = liveRoomService.getRoomDetails(roomId);

		if (roomDetails == null) {
			// ================= [디버깅 로그 추가] =================
			// 2. if문이 true로 동작했는지 확인하는 로그
			System.out.println("### [디버그] roomDetails가 null입니다. 리다이렉트합니다.");
			// ======================================================
			return "redirect:/"; // 또는 에러 페이지
		}

		// ================= [디버깅 로그 추가] =================
		// 3. if문이 false로 동작했는지 확인하는 로그
		System.out.println("### [디버그] 방을 찾았습니다. room.html을 렌더링합니다.");
		// ======================================================

		boolean isCreator = loginId.equals(roomDetails.getCreatorId());

		model.addAttribute("room", roomDetails);
		model.addAttribute("loginId", loginId);
		model.addAttribute("isCreator", isCreator);

		return "live-room";
	}

	@GetMapping("/api/live-rooms/{roomId}/members")
	@ResponseBody
	public ResponseEntity<List<LiveRoomParticipantDto>> getRoomParticipants(@PathVariable("roomId") Long roomId) {
		List<LiveRoomParticipantDto> participants = liveRoomService.getParticipants(roomId);
		return ResponseEntity.ok(participants);
	}

	@PostMapping("/api/live-rooms/{roomId}/leave")
	public ResponseEntity<Void> leaveRoom(@PathVariable("roomId") Long roomId, HttpSession session) {
		String memberId = (String) session.getAttribute("loginId");
		if (memberId == null) {
			return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
		}

		liveRoomService.leaveRoom(roomId, memberId);

		return ResponseEntity.ok().build();
	}

	// LiveRoomController.java 에 있어야 하는 코드

	@PostMapping("/api/live-rooms/{roomId}/invite")
	@ResponseBody // <-- @Controller를 사용 중이므로 @ResponseBody가 필수
	public ResponseEntity<?> inviteToRoom(@PathVariable("roomId") Long roomId, @RequestBody Map<String, String> payload,
			HttpSession session) {
		String inviterId = (String) session.getAttribute("loginId");
		if (inviterId == null) {
			return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
		}

		String inviteeId = payload.get("inviteeId");

		try {
			liveRoomService.inviteToRoom(roomId, inviterId, inviteeId);
			return ResponseEntity.ok().build();
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(Map.of("message", e.getMessage()));
		}
	}

	@DeleteMapping("/api/live-rooms/{roomId}")
	public ResponseEntity<?> deleteRoom(@PathVariable("roomId") Long roomId, HttpSession session) {
		String memberId = (String) session.getAttribute("loginId");
		if (memberId == null) {
			return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
		}

		try {
			liveRoomService.deleteRoom(roomId, memberId);
			return ResponseEntity.ok().build();
		} catch (SecurityException e) {
			return ResponseEntity.status(HttpStatus.FORBIDDEN).body(Map.of("message", e.getMessage()));
		} catch (IllegalArgumentException e) {
			return ResponseEntity.status(HttpStatus.NOT_FOUND).body(Map.of("message", e.getMessage()));
		}
	}

	@PostMapping("/api/live-rooms/invites/{inviteNo}/accept")
	@ResponseBody
	public ResponseEntity<?> acceptLiveRoomInvite(@PathVariable("inviteNo") int inviteNo, HttpSession session) {
		String loginId = (String) session.getAttribute("loginId");
		if (loginId == null) {
			return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(Map.of("message", "로그인이 필요합니다."));
		}
		try {
			// [수정] 서비스에 올바른 loginId를 전달합니다.
			liveRoomService.acceptInvite(inviteNo, loginId);

			System.out.println("초대 번호 : " + inviteNo + ", 수락자: " + loginId);

			return ResponseEntity.ok().body(Map.of("message", "초대를 수락했습니다."));
		} catch (Exception e) {
			// 예외 발생 시 서버 로그에 자세한 내용을 남기는 것이 좋습니다.
			e.printStackTrace();
			return ResponseEntity.badRequest().body(Map.of("message", e.getMessage()));
		}
	}

	@PostMapping("/api/live-rooms/invites/{inviteNo}/reject")
	@ResponseBody
	public ResponseEntity<?> rejectLiveRoomInvite(@PathVariable("inviteNo") int inviteNo, HttpSession session) {
		String loginId = (String) session.getAttribute("loginId");
		if (loginId == null) {
			return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(Map.of("message", "로그인이 필요합니다."));
		}
		try {
			liveRoomService.rejectInvite(inviteNo, loginId); // 서비스에 로직 구현 필요
			return ResponseEntity.ok().body(Map.of("message", "초대를 거절했습니다."));
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(Map.of("message", e.getMessage()));
		}
	}

	public static class WebSocketMessage {
		private String type;
		private String senderId;
		private Object payload;

		// Getters & Setters
		public String getType() {
			return type;
		}

		public void setType(String type) {
			this.type = type;
		}

		public String getSenderId() {
			return senderId;
		}

		public void setSenderId(String senderId) {
			this.senderId = senderId;
		}

		public Object getPayload() {
			return payload;
		}

		public void setPayload(Object payload) {
			this.payload = payload;
		}
	}

	// 채팅 메시지를 위한 클래스
	public static class ChatMessage {
		private String message;
		private String senderNickname;

		// Getters & Setters
		public String getMessage() {
			return message;
		}

		public void setMessage(String message) {
			this.message = message;
		}

		public String getSenderNickname() {
			return senderNickname;
		}

		public void setSenderNickname(String senderNickname) {
			this.senderNickname = senderNickname;
		}
	}

	public static class CodeUpdatePayload {
		private String type;
		private String senderId;
		private String editorContent;

		// Getters and Setters
		public String getType() {
			return type;
		}

		public void setType(String type) {
			this.type = type;
		}

		public String getSenderId() {
			return senderId;
		}

		public void setSenderId(String senderId) {
			this.senderId = senderId;
		}

		public String getEditorContent() {
			return editorContent;
		}

		public void setEditorContent(String editorContent) {
			this.editorContent = editorContent;
		}
	}
}
