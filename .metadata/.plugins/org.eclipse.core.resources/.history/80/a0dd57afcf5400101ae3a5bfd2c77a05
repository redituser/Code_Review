<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>마이페이지 - CODE CIRCLE</title>
    <style>
        /* CSS는 기존과 동일하게 유지합니다 (생략) */
        :root {
            --color-canvas-default: #0d1117; --color-canvas-subtle: #161b22; --color-border-default: #30363d;
            --color-border-muted: #21262d; --color-fg-default: #e6edf3; --color-fg-muted: #7d8590;
            --color-accent-fg: #1f6feb; --color-accent-emphasis: #238636; --color-danger-fg: #f85149;
            --font-family-sans: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
        }
        body { font-family: var(--font-family-sans); background-color: var(--color-canvas-default); color: var(--color-fg-default); margin: 0; }
        a { color: var(--color-accent-fg); text-decoration: none; } a:hover { text-decoration: underline; }
        .header { background-color: var(--color-canvas-subtle); padding: 16px 24px; border-bottom: 1px solid var(--color-border-default); font-size: 20px; font-weight: 600; }
        .page-container { display: flex; max-width: 1012px; margin: 24px auto; gap: 24px; }
        .side-nav { width: 25%; min-width: 200px; } .main-content { width: 75%; }
        .menu-list { list-style: none; padding: 0; margin: 0; }
        .menu-item a { display: block; padding: 8px 16px; border: 1px solid transparent; border-radius: 6px; font-weight: 500; color: var(--color-fg-default); }
        .menu-item a.active, .menu-item a:hover { background-color: var(--color-canvas-subtle); border-color: var(--color-border-muted); text-decoration: none; }
        .menu-item a.active { font-weight: 600; }
        .card { border: 1px solid var(--color-border-default); border-radius: 6px; background-color: var(--color-canvas-subtle); margin-bottom: 24px; }
        .card-header { padding: 16px; border-bottom: 1px solid var(--color-border-default); }
        .card-header h2 { margin: 0; font-size: 20px; }
        .card.card-danger .card-header { border-color: var(--color-danger-fg); }
        .card.card-danger h2 { color: var(--color-danger-fg); }
        .card-body { padding: 16px; }
        .form-group { margin-bottom: 16px; }
        .form-group label { display: block; font-weight: 600; margin-bottom: 8px; }
        .input-group { display: flex; gap: 8px; }
        .form-control { flex-grow: 1; width: 100%; padding: 8px 12px; background: var(--color-canvas-default); border: 1px solid var(--color-border-default); border-radius: 6px; color: var(--color-fg-default); font-size: 14px; box-sizing: border-box; }
        .form-control:disabled { background: #21262d; color: var(--color-fg-muted); }
        .form-control:focus { outline: none; border-color: var(--color-accent-fg); box-shadow: 0 0 0 3px rgba(31, 111, 235, 0.3); }
        .form-text { font-size: 12px; color: var(--color-fg-muted); margin-top: 4px; }
        .card-footer { padding: 16px; background-color: rgba(33, 38, 45, 0.5); border-top: 1px solid var(--color-border-default); text-align: right; }
        .btn { border: 1px solid var(--color-border-default); padding: 6px 16px; border-radius: 6px; font-size: 14px; font-weight: 500; cursor: pointer; transition: background-color 0.2s; background-color: #21262d; color: var(--color-fg-default); }
        .btn:hover { background-color: #30363d; }
        .btn-primary { background-color: var(--color-accent-emphasis); color: #ffffff; border-color: var(--color-accent-emphasis); }
        .btn-danger { background-color: var(--color-danger-fg); color: #ffffff; border-color: var(--color-danger-fg); }
        .tab-content { display: none; }
        .tab-content.active { display: block; }
    </style>
</head>
<body>
    <header class="header">
        <div style="max-width: 1012px; margin: 0 auto;">마이페이지</div>
    </header>

    <div class="page-container">
        <aside class="side-nav">
            <ul class="menu-list" id="myPageNav">
                <li class="menu-item"><a href="#profile" class="active">프로필</a></li>
                <li class="menu-item"><a href="#account">계정</a></li>
                </ul>
        </aside>

        <main class="main-content">
            <div id="profile" class="tab-content active">
                <form id="profileUpdateForm">
                    <div class="card">
                        <div class="card-header"><h2>공개 프로필</h2></div>
                        <div class="card-body">
                            <div class="form-group">
                                <label for="profileId">아이디</label>
                                <input type="text" id="profileId" class="form-control" value="{{member.id}}" disabled>
                            </div>
                            <div class="form-group">
                                <label for="profileNickname">닉네임</label>
                                <div class="input-group">
                                    <input type="text" id="profileNickname" name="nickname" class="form-control" value="{{member.nickName}}" required>
                                    <button type="button" id="checkNicknameBtn" class="btn">중복 확인</button>
                                </div>
                                <p id="nicknameHelp" class="form-text"></p>
                            </div>
                            <div class="form-group">
                                <label for="profileEmail">이메일</label>
                                <input type="email" id="profileEmail" name="email" class="form-control" value="{{member.email}}" required>
                            </div>
                        </div>
                        <div class="card-footer">
                            <button type="submit" class="btn btn-primary">프로필 업데이트</button>
                        </div>
                    </div>
                </form>
            </div>

            <div id="account" class="tab-content">
                 <form id="passwordChangeForm">
                    <div class="card">
                        <div class="card-header"><h2>비밀번호 변경</h2></div>
                        <div class="card-body">
                            <div class="form-group">
                                <label for="currentPassword">현재 비밀번호</label>
                                <input type="password" id="currentPassword" name="currentPassword" class="form-control" required>
                            </div>
                            <div class="form-group">
                                <label for="newPassword">새로운 비밀번호</label>
                                <input type="password" id="newPassword" name="newPassword" class="form-control" required>
                            </div>
                            <div class="form-group">
                                <label for="confirmPassword">새로운 비밀번호 확인</label>
                                <input type="password" id="confirmPassword" name="confirmPassword" class="form-control" required>
                            </div>
                        </div>
                        <div class="card-footer">
                            <button type="submit" class="btn btn-primary">비밀번호 변경</button>
                        </div>
                    </div>
                </form>
                 <form id="accountDeleteForm">
                    <div class="card card-danger">
                        <div class="card-header"><h2>회원 탈퇴</h2></div>
                        <div class="card-body">
                            <p>회원 탈퇴 시 모든 데이터는 복구할 수 없습니다. 정말로 탈퇴하시려면, 비밀번호를 입력하고 아래 버튼을 클릭하세요.</p>
                            <div class="form-group">
                                <label for="deleteConfirmPassword">비밀번호 확인</label>
                                <input type="password" id="deleteConfirmPassword" name="password" class="form-control" required>
                            </div>
                        </div>
                        <div class="card-footer">
                            <button type="submit" class="btn btn-danger">회원 탈퇴</button>
                        </div>
                    </div>
                </form>
            </div>
        </main>
    </div>

<script>
document.addEventListener('DOMContentLoaded', () => {
    // 탭 메뉴 전환 로직
    const navLinks = document.querySelectorAll('#myPageNav a');
    const tabContents = document.querySelectorAll('.tab-content');
    navLinks.forEach(link => {
        link.addEventListener('click', (e) => {
            e.preventDefault();
            navLinks.forEach(l => l.classList.remove('active'));
            tabContents.forEach(t => t.classList.remove('active'));
            const targetId = link.getAttribute('href').substring(1);
            link.classList.add('active');
            document.getElementById(targetId).classList.add('active');
        });
    });

    // --- [새 기능] 닉네임 중복 확인 ---
    const nicknameInput = document.getElementById('profileNickname');
    const nicknameHelp = document.getElementById('nicknameHelp');
    const checkNicknameBtn = document.getElementById('checkNicknameBtn');
    let isNicknameChecked = true; // 처음에는 기존 닉네임이므로 확인된 상태로 간주
    let lastCheckedNickname = nicknameInput.value; 

    nicknameInput.addEventListener('input', () => {
        isNicknameChecked = false; // 닉네임을 수정하면 다시 확인 필요
        nicknameHelp.textContent = '닉네임 중복 확인이 필요합니다.';
        nicknameHelp.style.color = 'orange';
    });

    checkNicknameBtn.addEventListener('click', async () => {
        const nickname = nicknameInput.value;
        if (!nickname) {
            alert('닉네임을 입력하세요.');
            return;
        }
        
        try {
            const response = await fetch('/api/member/check-nickname', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({ nickname })
            });
            const result = await response.json();
            if (result.available) {
                isNicknameChecked = true;
                lastCheckedNickname = nicknameInput.value;
                nicknameHelp.textContent = '사용 가능한 닉네임입니다.';
                nicknameHelp.style.color = 'var(--color-accent-emphasis)';
            } else {
                isNicknameChecked = false;
                nicknameHelp.textContent = '이미 사용 중인 닉네임입니다.';
                nicknameHelp.style.color = 'var(--color-danger-fg)';
            }
        } catch (error) {
            console.error('Nickname check failed:', error);
            nicknameHelp.textContent = '중복 확인 중 오류가 발생했습니다.';
        }
    });

    // --- 프로필 업데이트 ---
    document.getElementById('profileUpdateForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        if (!isNicknameChecked) {
            alert('닉네임 중복 확인을 먼저 완료해주세요.');
            return;
        }
        const formData = new FormData(e.target);
        const data = { nickname: formData.get('nickname'), email: formData.get('email') };

        try {
            const response = await fetch('/api/member/profile', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });
            if (!response.ok) throw new Error((await response.json()).message || '업데이트 실패');
            alert('프로필이 성공적으로 업데이트되었습니다.');
        } catch (error) {
            alert(error.message);
        }
    });

    // --- [새 기능] 비밀번호 변경 ---
    document.getElementById('passwordChangeForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        const newPassword = document.getElementById('newPassword').value;
        const confirmPassword = document.getElementById('confirmPassword').value;

        if (newPassword !== confirmPassword) {
            alert('새로운 비밀번호가 일치하지 않습니다.');
            return;
        }

        const formData = new FormData(e.target);
        const data = {
            currentPassword: formData.get('currentPassword'),
            newPassword: formData.get('newPassword')
        };
        
        try {
            const response = await fetch('/api/member/change-password', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(data)
            });
            const result = await response.json();
            if (!response.ok) throw new Error(result.message);
            alert(result.message);
            e.target.reset(); // 성공 시 폼 초기화
        } catch (error) {
            alert(error.message);
        }
    });

    // --- [새 기능] 회원 탈퇴 ---
    document.getElementById('accountDeleteForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        if (!confirm('정말로 회원 탈퇴를 진행하시겠습니까? 이 작업은 되돌릴 수 없습니다.')) {
            return;
        }
        
        const password = document.getElementById('deleteConfirmPassword').value;
        try {
            const response = await fetch('/api/member/delete-account', {
                method: 'DELETE',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({ password })
            });
            const result = await response.json();
            if (!response.ok) throw new Error(result.message);
            
            alert(result.message);
            window.location.href = "/"; // 성공 시 메인 페이지로 이동
        } catch (error) {
            alert(error.message);
        }
    });
});
</script>
</body>
</html>